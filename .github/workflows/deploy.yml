name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: TestPassword123!
          MSSQL_PID: Express
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checar Repositorio
        uses: actions/checkout@v4

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Instalar dependencias
        run: npm ci

      - name: Configurar variables de entorno para testing
        run: |
          echo "DATABASE_URL=sqlserver://localhost:1433;database=test_parcelas;user=sa;password=TestPassword123!;encrypt=true;trustServerCertificate=true" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=1433" >> $GITHUB_ENV
          echo "DB_NAME=test_parcelas" >> $GITHUB_ENV
          echo "DB_USER=sa" >> $GITHUB_ENV
          echo "DB_PASSWORD=TestPassword123!" >> $GITHUB_ENV

      - name: Crear base de datos de test
        run: |
          # Esperar que SQL Server esté listo
          sleep 30
          # Crear la base de datos de prueba
          docker exec $(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest) \
            /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! \
            -Q "CREATE DATABASE test_parcelas;"

      - name: Generar cliente Prisma
        run: npx prisma generate

      - name: Ejecutar migraciones de Prisma
        run: npx prisma migrate deploy

      - name: Verificar tipos TypeScript
        run: npx tsc --noEmit

      - name: Ejecutar ESLint (si está configurado)
        run: npm run lint || echo "ESLint no configurado, continuando..."

      - name: Construir proyecto
        run: npm run build

      - name: Ejecutar tests (si están configurados)
        run: npm test || echo "Tests no configurados, continuando..."

      - name: Subir artefactos del build
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-build-files
          path: dist/
          retention-days: 7

  deploy:
    name: Deploy to Kubernetes on VPS
    runs-on: ubuntu-latest
    needs: ci
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy Backend to VPS with Kubernetes
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          port: 22
          script: |
            set -e  # Salir en caso de error

            echo "🚀 Iniciando deploy del backend..."
            cd ${{ secrets.VPS_BACKEND_PROJECT_PATH }}

            echo "📥 Obteniendo últimos cambios..."
            git pull origin main

            echo "🔨 Construyendo imagen Docker del backend..."
            docker build -t parcela-backend:${{ github.sha }} .

            echo "🏷️ Etiquetando imagen..."
            docker tag parcela-backend:${{ github.sha }} parcela-backend:latest

            echo "🗄️ Aplicando configuraciones de base de datos..."
            kubectl apply -f k8s/sqlserver.yaml --namespace=${{ secrets.K8S_NAMESPACE }}
            kubectl apply -f k8s/mongodb.yaml --namespace=${{ secrets.K8S_NAMESPACE }}

            echo "🔐 Aplicando secrets y deployment principal..."
            kubectl apply -f k8s/deployment.yaml --namespace=${{ secrets.K8S_NAMESPACE }}

            echo "🔄 Actualizando deployment en Kubernetes..."
            kubectl set image deployment/parcela-backend-deployment \
              parcela-backend=parcela-backend:${{ github.sha }} \
              --namespace=${{ secrets.K8S_NAMESPACE }}

            echo "⏳ Esperando rollout del backend..."
            kubectl rollout status deployment/parcela-backend-deployment \
              --namespace=${{ secrets.K8S_NAMESPACE }} \
              --timeout=600s

            echo "🔍 Verificando estado de los pods..."
            kubectl get pods -l app=parcela-backend --namespace=${{ secrets.K8S_NAMESPACE }}

            echo "📊 Verificando servicios..."
            kubectl get services --namespace=${{ secrets.K8S_NAMESPACE }}

            echo "🧹 Limpiando imágenes no utilizadas..."
            docker image prune -f

            echo "✅ Deploy del backend completado exitosamente!"

            echo "🔗 Verificando conectividad..."
            sleep 30
            kubectl exec -it deployment/parcela-backend-deployment --namespace=${{ secrets.K8S_NAMESPACE }} -- curl -f http://localhost:3000/health || echo "Health check pendiente..."
